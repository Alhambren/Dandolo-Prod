/**
 * Enhanced error handling for the Dandolo Agent SDK
 * 
 * Provides comprehensive error types and utilities for debugging
 * and handling different error scenarios gracefully.
 */

import { DandoloError } from './types';

/**
 * Create a standardized Dandolo error from various error sources
 */
export function createDandoloError(error: any): DandoloError {
  // If it's already a DandoloError, return as-is
  if (error.type && error.code) {
    return error as DandoloError;
  }\n  \n  // Handle HTTP response errors\n  if (error.response) {\n    const response = error.response;\n    const data = response.data;\n    \n    // Check if it's a structured error response\n    if (data && data.error) {\n      return {\n        message: data.error.message || 'Unknown API error',\n        type: data.error.type || 'server_error',\n        code: data.error.code || 'unknown_error',\n        status: response.status,\n        request_id: data.error.request_id,\n        details: data.error.details\n      };\n    }\n    \n    // Handle common HTTP status codes\n    return {\n      message: getStatusMessage(response.status),\n      type: getErrorType(response.status),\n      code: getErrorCode(response.status),\n      status: response.status\n    };\n  }\n  \n  // Handle network errors\n  if (error.code === 'ECONNREFUSED' || error.code === 'ENOTFOUND' || error.code === 'ETIMEDOUT') {\n    return {\n      message: 'Network connection failed. Please check your internet connection.',\n      type: 'network_error',\n      code: 'connection_failed',\n      details: { originalCode: error.code }\n    };\n  }\n  \n  // Handle timeout errors\n  if (error.code === 'ECONNABORTED' || error.message?.includes('timeout')) {\n    return {\n      message: 'Request timed out. The server took too long to respond.',\n      type: 'network_error',\n      code: 'timeout',\n      details: { timeout: true }\n    };\n  }\n  \n  // Handle generic errors\n  return {\n    message: error.message || 'An unexpected error occurred',\n    type: 'unknown_error',\n    code: 'generic_error',\n    details: { originalError: error }\n  };\n}\n\n/**\n * Check if an error is a rate limit error\n */\nexport function isRateLimitError(error: DandoloError): boolean {\n  return error.status === 429 || error.type === 'rate_limit_error' || error.code === 'rate_limit_exceeded';\n}\n\n/**\n * Check if an error is an authentication error\n */\nexport function isAuthError(error: DandoloError): boolean {\n  return error.status === 401 || error.type === 'authentication_error';\n}\n\n/**\n * Check if an error is a validation error\n */\nexport function isValidationError(error: DandoloError): boolean {\n  return error.status === 400 || error.type === 'validation_error';\n}\n\n/**\n * Check if an error is a server error\n */\nexport function isServerError(error: DandoloError): boolean {\n  return (error.status && error.status >= 500) || error.type === 'server_error';\n}\n\n/**\n * Check if an error is retryable\n */\nexport function isRetryableError(error: DandoloError): boolean {\n  return (\n    isServerError(error) ||\n    error.code === 'timeout' ||\n    error.code === 'connection_failed' ||\n    (isRateLimitError(error) && !error.message?.includes('quota exceeded'))\n  );\n}\n\n/**\n * Get a human-readable error message for display\n */\nexport function getDisplayMessage(error: DandoloError): string {\n  switch (error.code) {\n    case 'invalid_api_key':\n      return 'Invalid API key. Please check your API key and try again.';\n    case 'rate_limit_exceeded':\n      return 'Rate limit exceeded. Please wait a moment before trying again.';\n    case 'insufficient_quota':\n      return 'You have exceeded your usage quota. Please upgrade your plan or wait for the quota to reset.';\n    case 'model_not_found':\n      return 'The requested model is not available. Please try a different model.';\n    case 'invalid_request_format':\n      return 'Invalid request format. Please check your request parameters.';\n    case 'context_length_exceeded':\n      return 'The conversation is too long. Please start a new conversation or reduce the message length.';\n    case 'connection_failed':\n      return 'Connection failed. Please check your internet connection and try again.';\n    case 'timeout':\n      return 'Request timed out. Please try again.';\n    default:\n      return error.message;\n  }\n}\n\n/**\n * Get suggestions for fixing an error\n */\nexport function getErrorSuggestions(error: DandoloError): string[] {\n  const suggestions: string[] = [];\n  \n  switch (error.code) {\n    case 'invalid_api_key':\n      suggestions.push('Verify your API key is correct');\n      suggestions.push('Check that your API key has the required permissions');\n      suggestions.push('Ensure your API key is not expired');\n      break;\n      \n    case 'rate_limit_exceeded':\n      suggestions.push('Wait before making another request');\n      suggestions.push('Consider upgrading to a higher tier API key');\n      suggestions.push('Implement exponential backoff in your retry logic');\n      break;\n      \n    case 'model_not_found':\n      suggestions.push('Use the models.list() method to see available models');\n      suggestions.push('Check the model ID spelling');\n      suggestions.push('Verify your API key has access to this model');\n      break;\n      \n    case 'context_length_exceeded':\n      suggestions.push('Reduce the number of messages in your conversation');\n      suggestions.push('Use a model with a larger context window');\n      suggestions.push('Implement conversation summarization');\n      break;\n      \n    case 'connection_failed':\n      suggestions.push('Check your internet connection');\n      suggestions.push('Verify the API endpoint URL is correct');\n      suggestions.push('Check if there are any firewall restrictions');\n      break;\n      \n    case 'timeout':\n      suggestions.push('Increase the request timeout');\n      suggestions.push('Try breaking large requests into smaller ones');\n      suggestions.push('Check if the service is experiencing high load');\n      break;\n  }\n  \n  return suggestions;\n}\n\n/**\n * Create a comprehensive error report for debugging\n */\nexport function createErrorReport(error: DandoloError, context?: any): string {\n  const report = [`🚨 Dandolo SDK Error Report`];\n  report.push(`━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━`);\n  report.push(`Error: ${error.message}`);\n  report.push(`Type: ${error.type}`);\n  report.push(`Code: ${error.code}`);\n  \n  if (error.status) {\n    report.push(`HTTP Status: ${error.status}`);\n  }\n  \n  if (error.request_id) {\n    report.push(`Request ID: ${error.request_id}`);\n  }\n  \n  report.push(`Timestamp: ${new Date().toISOString()}`);\n  \n  const suggestions = getErrorSuggestions(error);\n  if (suggestions.length > 0) {\n    report.push(``);\n    report.push(`💡 Suggestions:`);\n    suggestions.forEach((suggestion, index) => {\n      report.push(`   ${index + 1}. ${suggestion}`);\n    });\n  }\n  \n  if (error.details) {\n    report.push(``);\n    report.push(`🔍 Additional Details:`);\n    report.push(JSON.stringify(error.details, null, 2));\n  }\n  \n  if (context) {\n    report.push(``);\n    report.push(`📋 Context:`);\n    report.push(JSON.stringify(context, null, 2));\n  }\n  \n  report.push(`━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━`);\n  report.push(`For support, visit: https://dandolo.ai/support`);\n  \n  return report.join('\\n');\n}\n\n/**\n * Custom error classes for specific scenarios\n */\nexport class DandoloAuthenticationError extends Error {\n  constructor(message: string, public apiKey?: string) {\n    super(message);\n    this.name = 'DandoloAuthenticationError';\n  }\n}\n\nexport class DandoloRateLimitError extends Error {\n  constructor(\n    message: string,\n    public limit: number,\n    public remaining: number,\n    public resetTime: Date\n  ) {\n    super(message);\n    this.name = 'DandoloRateLimitError';\n  }\n}\n\nexport class DandoloValidationError extends Error {\n  constructor(message: string, public field?: string, public value?: any) {\n    super(message);\n    this.name = 'DandoloValidationError';\n  }\n}\n\nexport class DandoloNetworkError extends Error {\n  constructor(message: string, public originalError?: any) {\n    super(message);\n    this.name = 'DandoloNetworkError';\n  }\n}\n\n/**\n * Helper functions for internal use\n */\nfunction getStatusMessage(status: number): string {\n  const messages: Record<number, string> = {\n    400: 'Bad Request - The request was invalid',\n    401: 'Unauthorized - Invalid API key or authentication failed',\n    403: 'Forbidden - Access denied',\n    404: 'Not Found - The requested resource was not found',\n    422: 'Unprocessable Entity - Validation failed',\n    429: 'Too Many Requests - Rate limit exceeded',\n    500: 'Internal Server Error - Something went wrong on our end',\n    502: 'Bad Gateway - Server temporarily unavailable',\n    503: 'Service Unavailable - Server is temporarily overloaded',\n    504: 'Gateway Timeout - Server took too long to respond'\n  };\n  \n  return messages[status] || `HTTP ${status} Error`;\n}\n\nfunction getErrorType(status: number): DandoloError['type'] {\n  if (status === 401 || status === 403) return 'authentication_error';\n  if (status === 400 || status === 422) return 'validation_error';\n  if (status === 429) return 'rate_limit_error';\n  if (status >= 500) return 'server_error';\n  return 'unknown_error';\n}\n\nfunction getErrorCode(status: number): string {\n  const codes: Record<number, string> = {\n    400: 'bad_request',\n    401: 'unauthorized',\n    403: 'forbidden',\n    404: 'not_found',\n    422: 'validation_failed',\n    429: 'rate_limit_exceeded',\n    500: 'internal_server_error',\n    502: 'bad_gateway',\n    503: 'service_unavailable',\n    504: 'gateway_timeout'\n  };\n  \n  return codes[status] || 'unknown_http_error';\n}"}